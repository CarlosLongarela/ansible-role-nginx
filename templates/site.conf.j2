# {{ ansible_managed }}

{% if item.value.cache_nginx == true %}
# Incluimos las reglas generales del path de nginx-cache
fastcgi_cache_path {{ item.value.fcgi_cache_path }} levels={{ item.value.fcgi_levels }} keys_zone={{ item.value.fcgi_keys_zone_name }}:{{ item.value.fcgi_keys_zone_size }} inactive={{ item.value.fcgi_inactive }} use_temp_path=off;
{% endif %}

{% if item.value.sin_www == true %}
# Dominio con www para capturar las peticiones a www
# y redirigirlas a la versión sin www
{% else %}
# Dominio sin www para capturar las peticiones sin www
# y redirigirlas a la versión con www
{% endif %}
server {
	# Host del Servidor
{% if item.value.sin_www == true %}
	server_name	www.{{ item.value.dominio }};
{% else %}
	server_name		{{ item.value.dominio }};
{% endif %}
	# Puertos del Servidor
	listen			80;
{% if item.value.ssl == true %}
	listen			443 ssl http2;
{% endif %}
	listen			[::]:80;
{% if item.value.ssl == true %}
	listen			[::]:443 ssl http2;
{% endif %}

{% if item.value.ssl == true %}
	## Certificado SSL
	ssl_certificate			/etc/letsencrypt/live/{{ item.value.dominio_dir_certbot }}/fullchain.pem;
	ssl_certificate_key		/etc/letsencrypt/live/{{ item.value.dominio_dir_certbot }}/privkey.pem;
{% endif %}

{% if item.value.sin_www == true %}
	# Redirección a la versión sin www
	return		301 http{% if item.value.ssl == true %}s{% endif %}://{{ item.value.dominio }}$request_uri;
{% else %}
	# Redirección a la versión con www
	return		301 http{% if item.value.ssl == true %}s{% endif %}://www.{{ item.value.dominio }}$request_uri;
{% endif %}
}

{% if item.value.ssl == true %}
## Redirigimos todas las peticiones HTTP a HTTPS
server {
	# Server host
	server_name	{{ item.value.dominio }};
	# Puerto del servidor
	listen		80;
	listen		[::]:80;

{% if item.value.sin_www == true %}
	return		301 https://{{ item.value.dominio }}$request_uri;
{% else %}
	return		301 https://www.{{ item.value.dominio }}$request_uri;
{% endif %}
}
{% endif %}

# Bloque de configuración general del servidor
# Parte encargada de todas las peticiones del servidor
server{
	# Host del Servidor
{% if item.value.sin_www == true %}
	server_name		{{ item.value.dominio }};
{% else %}
	server_name		www.{{ item.value.dominio }};
{% endif %}

{% if item.value.ssl == true %}
	# Puerto del servidor
	listen		443 ssl http2;
	listen		[::]:443 ssl http2;
{% else %}
	listen		80;
	listen		[::]:80;
{% endif %}

	# Carpeta raíz del sitio web
	root		{{ item.value.root }};

	# Logs web
{% if item.value.cache_nginx == true %}
	access_log		{{ nginx_vhosts_root }}/{{ item.value.dominio }}/logs/access.log web_cache;
{% else %}
	access_log		{{ nginx_vhosts_root }}/{{ item.value.dominio }}/logs/access.log;
{% endif %}
	error_log		{{ nginx_vhosts_root }}/{{ item.value.dominio }}/logs/error.log;

	index			{{ item.value.index }};

{% if item.value.ssl == true %}
	# Certificado SSL
	ssl_certificate			/etc/letsencrypt/live/{{ item.value.dominio_dir_certbot }}/fullchain.pem;
	ssl_certificate_key		/etc/letsencrypt/live/{{ item.value.dominio_dir_certbot }}/privkey.pem;

	# Seguridad SSL Fuerte con códigos en [Cipher list](https://cipherli.st/)
	ssl_protocols TLSv1.2;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
	ssl_ecdh_curve secp384r1;
	ssl_session_cache shared:SSL:10m;
{#	ssl_session_tickets off; # De momento lo desactivamos por un problema en esta versión #}
	ssl_stapling on;
	ssl_stapling_verify on;
	resolver 127.0.0.1 213.186.33.99 8.8.8.8 valid=300s;
	resolver_timeout 5s;
	add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
	add_header X-Frame-Options DENY;
	add_header X-Content-Type-Options nosniff;

	# Primero generarlo con:
	# cd /etc/ssl/certs
	# openssl dhparam -out dhparam.pem 4096
	ssl_dhparam               /etc/ssl/certs/dhparam.pem;
{% endif %}

	# Para los certificacdos de Lets Encrypt, necesario aunque aún no tenga SSL para poder solicitar el certificado
	location ~ /.well-known {
		allow all;
	}

	# Restricciones/seguridad general
	include {{ nginx_conf_dir }}/snippets/security.conf;

{% if item.value.cache_nginx == true %}
	############################################################
	######## Reglas para Caché desde Nginx #####################
	############################################################
	set $skip_cache 0;

	# peticiones POST y urls con parametros deben ir siempre a PHP
	if ($request_method = POST) {
		set $skip_cache 1;
	}

	if ($query_string != "") {
		set $skip_cache 1;
	}

	# Sin cache en uris que contengan los siguientes segmentos
	if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml") {
		set $skip_cache 1;
	}

	# Sin cache  para usuarios conectados y comentarios recien enviados
	if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
		set $skip_cache 1;
	}
	############################################################
	######## Reglas para Caché desde Nginx #####################
	############################################################
{% endif %}

{% if item.value.cms == "wordpress" %}
	# Yoast SEO Sitemaps
	location ~ ([^/]*)sitemap(.*).x(m|s)l$ {
		## this redirects sitemap.xml to /sitemap_index.xml
		rewrite ^/sitemap.xml$ /sitemap_index.xml permanent;
		## this makes the XML sitemaps work
		rewrite ^/([a-z]+)?-?sitemap.xsl$ /index.php?xsl=$1 last;
		rewrite ^/sitemap_index.xml$ /index.php?sitemap=1 last;
		rewrite ^/([^/]+?)-sitemap([0-9]+)?.xml$ /index.php?sitemap=$1&sitemap_n=$2 last;
		## The following lines are optional for the premium extensions
		## News SEO
		rewrite ^/news-sitemap.xml$ /index.php?sitemap=wpseo_news last;
		## Local SEO
		rewrite ^/locations.kml$ /index.php?sitemap=wpseo_local_kml last;
		rewrite ^/geo-sitemap.xml$ /index.php?sitemap=wpseo_local last;
		## Video SEO
		rewrite ^/video-sitemap.xsl$ /index.php?xsl=video last;
	}

	# Reglas para WordPress
	location / {
		try_files $uri $uri/ /index.php?$args;
	}

	# Añadir barra final a las peticiones */wp-admin
	rewrite /wp-admin$ http{% if item.value.ssl == true %}s{% endif %}://$host$uri/ permanent;
{% endif %}

{% if item.value.cms == "prestashop" %}
{#
	rewrite ^/api/?(.*)$ /webservice/dispatcher.php?url=$1 last;
	rewrite ^/([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\.jpg$ /img/p/$1/$1$2.jpg last;
	rewrite ^/([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\.jpg$ /img/p/$1/$2/$1$2$3.jpg last;
	rewrite ^/([0-9])([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\.jpg$ /img/p/$1/$2/$3/$1$2$3$4.jpg last;
	rewrite ^/([0-9])([0-9])([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\.jpg$ /img/p/$1/$2/$3/$4/$1$2$3$4$5.jpg last;
	rewrite ^/([0-9])([0-9])([0-9])([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\.jpg$ /img/p/$1/$2/$3/$4/$5/$1$2$3$4$5$6.jpg last;
	rewrite ^/([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\.jpg$ /img/p/$1/$2/$3/$4/$5/$6/$1$2$3$4$5$6$7.jpg last;
	rewrite ^/([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\.jpg$ /img/p/$1/$2/$3/$4/$5/$6/$7/$1$2$3$4$5$6$7$8.jpg last;
	rewrite ^/([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\.jpg$ /img/p/$1/$2/$3/$4/$5/$6/$7/$8/$1$2$3$4$5$6$7$8$9.jpg last;
	rewrite ^/c/([0-9]+)(-[_a-zA-Z0-9-]*)(-[0-9]+)?/.+\.jpg$ /img/c/$1$2.jpg last;
	rewrite ^/c/([a-zA-Z-]+)(-[0-9]+)?/.+\.jpg$ /img/c/$1.jpg last;
	rewrite ^/([0-9]+)(-[_a-zA-Z0-9-]*)(-[0-9]+)?/.+\.jpg$ /img/c/$1$2.jpg last;
	try_files $uri $uri/ /index.php?$args;
#}
	rewrite ^/[a-zA-Z][a-zA-Z]/(index\.php.*)$ /$1 last;  # Elimnar el código de idioma cuando index.php es llamado directamente
	rewrite ^/api/?(.*)$ /webservice/dispatcher.php?url=$1 last;
	rewrite ^/([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+.jpg$ /img/p/$1/$1$2$3.jpg last;
	rewrite ^/([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+.jpg$ /img/p/$1/$2/$1$2$3$4.jpg last;
	rewrite ^/([0-9])([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+.jpg$ /img/p/$1/$2/$3/$1$2$3$4$5.jpg last;
	rewrite ^/([0-9])([0-9])([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+.jpg$ /img/p/$1/$2/$3/$4/$1$2$3$4$5$6.jpg last;
	rewrite ^/([0-9])([0-9])([0-9])([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+.jpg$ /img/p/$1/$2/$3/$4/$5/$1$2$3$4$5$6$7.jpg last;
	rewrite ^/([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+.jpg$ /img/p/$1/$2/$3/$4/$5/$6/$1$2$3$4$5$6$7$8.jpg last;
	rewrite ^/([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+.jpg$ /img/p/$1/$2/$3/$4/$5/$6/$7/$1$2$3$4$5$6$7$8$9.jpg last;
	rewrite ^/([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+.jpg$ /img/p/$1/$2/$3/$4/$5/$6/$7/$8/$1$2$3$4$5$6$7$8$9$10.jpg last;
	rewrite ^/c/([0-9]+)(-[.*_a-zA-Z0-9-]*)(-[0-9]+)?/.+.jpg$ /img/c/$1$2$3.jpg last;
	rewrite ^/c/([a-zA-Z_-]+)(-[0-9]+)?/.+.jpg$ /img/c/$1$2.jpg last;
	location /{{ item.value.prestashop_admin | default('admin') }}/ {
		if (!-e $request_filename) {
			rewrite ^/.*$ /{{ item.value.prestashop_admin | default('admin') }}/index.php last;
		}
	}
	{# De momento usamos el try_files del bloque anterior
	location / {
		if (!-e $request_filename) {
			rewrite ^/.*$ /index.php last;
		}
	}
	#}
	try_files $uri $uri/ /index.php?$args; {# Del bloque de código anterior #}
{% endif %}


{% if item.value.cache_nginx == true %}
	# Pasamos todas la peticiones de archivos .php al servicio php-fpm
	location ~ \.php$ {
		# Defensa del exploit Zero-day
		# http://forum.nginx.org/read.php?2,88845,page=3
		# No se ejecutara bien (404 error) si el archivo no se encuentra fisicamente en este servidor, lo que es posible con  php-fpm/php-fcgi.
		# Comentar la linea 'try_files' si php-fpm/php-fcgi esta en otra maquina (y cruza los dedos para no ser hackeado)
		try_files $uri =404;

		# NOTA: Debemos tener "cgi.fix_pathinfo = 0;" en php.ini
		fastcgi_split_path_info ^(.+\.php)(/.+)$;

		include fastcgi_params;
		fastcgi_index index.php;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		# fastcgi_intercept_errors on;
		fastcgi_pass php;

		fastcgi_cache_key "$scheme$request_method$host$request_uri";
		fastcgi_cache_revalidate on;
		fastcgi_cache_lock on;
		fastcgi_cache_use_stale error timeout invalid_header updating http_500 http_503;
		fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

		fastcgi_cache_bypass $skip_cache;
		fastcgi_no_cache $skip_cache;

		fastcgi_cache {{ item.value.fcgi_keys_zone_name }};
		fastcgi_cache_valid  {{ item.value.fcgi_cache_valid }};

		fastcgi_buffer_size 128k;
		fastcgi_buffers 4 256k;
		fastcgi_busy_buffers_size 256k;

		# Fijamos cache para archivos html creados desde php
		add_header Pragma "public";
		add_header Cache-Control "max-age=21600, public, must-revalidate, proxy-revalidate";

		##
		# Para ver si se ha servido desde cache
		#
		add_header Fastcgi-Cache $upstream_cache_status;
		# Saludamos
		# add_header X-Hacker "Oh, nice to meet you ;) you can contact me at carlos at longarela dot eu";
	}

	location ~ /purge(/.*) {
		fastcgi_cache_purge {{ item.value.fcgi_keys_zone_name }} "$scheme$request_method$host$1";
	}
{% else %}
	# Pasamos todas la peticiones de archivos .php al servicio php-fpm
	location ~ \.php$ {
		# Defensa del exploit Zero-day
		# http://forum.nginx.org/read.php?2,88845,page=3
		# No se ejecutara bien (404 error) si el archivo no se encuentra fisicamente en este servidor, lo que es posible con  php-fpm/php-fcgi.
		# Comentar la linea 'try_files' si php-fpm/php-fcgi esta en otra maquina (y cruza los dedos para no ser hackeado)
		try_files $uri =404;

		# NOTA: Debemos tener "cgi.fix_pathinfo = 0;" en php.ini
		fastcgi_split_path_info ^(.+\.php)(/.+)$;

		include fastcgi_params;
		fastcgi_index index.php;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		# fastcgi_intercept_errors on;
		fastcgi_pass php;
	}
{% endif %}

{% if item.value.cms == "wordpress" %}
	# Para evitar ataques a admin wp
	location = /wp-login.php {
			limit_req zone=one burst=1 nodelay;
			include fastcgi_params;
			fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
			fastcgi_pass php;
	}
{% endif %}
}
